name: Build and Release Binary

on:
  push:
    tags:
      - 'v*'  # Déclenche le workflow lors de la création d'un tag commençant par "v"

jobs:
  build:
    name: Build and Release Binary
    runs-on: macos-latest

    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2 : Installer uv
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.13"  # Optionnel : version spécifique

      # Étape 3 : Configurer Python
      - name: Set up Python
        run: uv python install

      # Étape 4 : Synchroniser les dépendances
      - name: Sync dependencies
        run: uv sync --all-extras --dev

      # Étape 5 : Construire le binaire
      - name: Build binary with PyInstaller
        run: |
          pip install pyinstaller  # Vérifie que PyInstaller est installé
          pyinstaller --onefile main.py --name conso_elec
        env:
          UV_SYSTEM_PYTHON: 1

      # Étape 6 : Créer une release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}  # Utilise le tag actuel
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Étape 7 : Ajouter le binaire à la release
      - name: Upload Binary to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/conso_elec  # Chemin vers le binaire
          asset_name: conso_elec # Nom sous lequel le fichier sera disponible
          asset_content_type: application/octet-stream
